AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lets get fixin!

  '
Globals:
  Function:
    Timeout: 10
Parameters:
  BadPorts:
    Type: String
    Default: 22,3389
  GoodIpRange:
    Type: String
    Default: 10.0.0.0/8
Resources:
  SecurityGroupRemediationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://getty-sam-templates-canada/4e497835d5a2b95d216b02a84652330f
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          bad_ports:
            Ref: BadPorts
          good_ip_range:
            Ref: GoodIpRange
      MemorySize: 128
      Timeout: 10
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:*SecurityGroup*
          Resource: '*'
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
        - aws.ec2
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AuthorizeSecurityGroupIngress
      Targets:
      - Arn:
          Fn::GetAtt:
          - SecurityGroupRemediationLambda
          - Arn
        Id: GuardDutyFunction
  SGInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName:
        Fn::GetAtt:
        - SecurityGroupRemediationLambda
        - Arn
      SourceArn:
        Fn::GetAtt:
        - ScheduledRule
        - Arn
  S3RemediationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://getty-sam-templates-canada/7b3e0330d2bc397162526b4d3957e0e7
      Handler: s3.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:*acl*
          - s3:*policy*
          Resource: '*'
  S3Schedule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
        - aws.s3
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - s3.amazonaws.com
          eventName:
          - PutBucketAcl
          - PutBucketPolicy
      Targets:
      - Arn:
          Fn::GetAtt:
          - S3RemediationLambda
          - Arn
        Id: S3Func
  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName:
        Fn::GetAtt:
        - S3RemediationLambda
        - Arn
      SourceArn:
        Fn::GetAtt:
        - S3Schedule
        - Arn
