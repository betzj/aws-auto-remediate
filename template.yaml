AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lets get fixin!
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  BadPorts:
    Type: String
    Default: '22,3389'
  GoodIpRange:
    Type: String
    Default: 10.0.0.0/8
  WhitelistBuckets:
    Type: String
    Description: Pythonic List
    Default: '["None", "test-open-getty-123"]'
  WhitelistInstances:
    Type: String
    Description: Pythonic list of instances to ignore
    Default: '[""]'
  EC2OwnerTagName:
    Description: The name of the owner tag <yourval> - username
    Type: String
    Default: instance_creator
  EC2StatusChangeTagName:
    Description: The name of the statuschange tag <yourval> - username
    Type: String
    Default: last_change_by

Resources:
  ## SG REMEDIATION
  SecurityGroupRemediationLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          bad_ports: !Ref BadPorts
          good_ip_range: !Ref GoodIpRange
      MemorySize: 128
      Timeout: 10
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17' 
        Statement:
          - Effect: Allow
            Action:
              - ec2:*SecurityGroup*
            Resource: '*'  
  ScheduledRule:
      Type: 'AWS::Events::Rule'
      Properties:
        #Name: !Sub "${AWS::StackName}-Scheduled-role"
        State: ENABLED
        EventPattern:
          source:
              - aws.ec2
          detail-type:
              - AWS API Call via CloudTrail
          detail:
              eventSource:
                  - ec2.amazonaws.com
              eventName:
                  - AuthorizeSecurityGroupIngress
        Targets:
            - Arn:
                'Fn::GetAtt':
                  - SecurityGroupRemediationLambda
                  - Arn
              Id: GuardDutyFunction
  SGInvokePermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      FunctionName:
          'Fn::GetAtt':
              - SecurityGroupRemediationLambda
              - Arn
      SourceArn:
          'Fn::GetAtt':
              - ScheduledRule
              - Arn
  ## / SG REMEDIATION

  ## S3 Remediation
  S3RemediationLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: s3.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          S3_WHITELIST: !Ref WhitelistBuckets
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17' 
        Statement:
          - Effect: Allow
            Action:
              - s3:*acl*
              - s3:*policy*
            Resource: '*'  
  S3Schedule:
      Type: 'AWS::Events::Rule'
      Properties:
        #Name: !Sub "${AWS::StackName}-Scheduled-role"
        State: ENABLED
        EventPattern:
          source:
            - aws.s3
          detail-type:
              - AWS API Call via CloudTrail
          detail:
              eventSource:
                  - s3.amazonaws.com
              eventName:
                  - PutBucketAcl
                  - PutBucketPolicy

        Targets:
            - Arn:
                'Fn::GetAtt':
                  - S3RemediationLambda
                  - Arn
              Id: S3Func
  S3LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      FunctionName:
          'Fn::GetAtt':
              - S3RemediationLambda
              - Arn
      SourceArn:
          'Fn::GetAtt':
              - S3Schedule
              - Arn
  
  ## EC2 Tagging Remediation
  EC2TaggingLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: ec2_tagging.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          EC2_WHITELIST: !Ref WhitelistInstances
          EC2_OWNER_TAG_NAME: !Ref EC2OwnerTagName
          EC2_STATUS_CHANGE_TAG_NAME: !Ref EC2StatusChangeTagName
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17' 
        Statement:
          - Effect: Allow
            Action:
              - ec2:*Tags
              - ec2:Describe*
            Resource: '*'  
  EC2TaggingSchedule:
      Type: 'AWS::Events::Rule'
      Properties:
        State: ENABLED
        EventPattern:
          source:
            - aws.ec2
          detail-type:
              - AWS API Call via CloudTrail
          detail:
              eventSource:
                  - ec2.amazonaws.com
              eventName:
                  - StartInstances
                  - RunInstances
                  - StopInstances
                  - RebootInstances
        Targets:
            - Arn:
                'Fn::GetAtt':
                  - EC2TaggingLambda
                  - Arn
              Id: EC2Schedule
  EC2LambdaTaggingPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      FunctionName:
          'Fn::GetAtt':
              - EC2TaggingLambda
              - Arn
      SourceArn:
          'Fn::GetAtt':
              - EC2TaggingSchedule
              - Arn